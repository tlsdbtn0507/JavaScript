//1-1변수란?
//컴퓨터가 명령을 읽고 실행하기 위해 데이터를 저장한 임의의 메모리 주소
//*파싱: 컴퓨터가 실행문, 표현식을 해석하는 것/평가: 코드를 읽거나 계산하는 것*
//ex)
const result = 10 + 20;
//*10+20은 표현식*
//result가 변수이고 30은 변수 값이다 변수에 값이 대입되는 걸 할당이라고도 한다. *변수가 다른곳에 호출되는 것을 참조(reference)라고 한다

//1-2식별자란?
//변수가 데이터를 저장한 임의의 메모리 주소이자 이름이라고 하면
//식별자는 그 메모리 주소의 이름
//식별자는 변수보다 포괄적인 개념이고 그 식별자에는 변수 말고도 함수 클래스 등이 있다

//1-3변수 선언이란?
//var, let, const가 있으며 변수를 사용하기 위해 필수적으로 선언을 해줘야 함
//변수를 선언한 후 할당을 하지 않으면 해당 메모리 공간, 변수는 비었을것 같지만 js에서는 암묵적으로 undefined를 초기화(값을 최초로 할당하는 것) 해서 넣어줌
//*만약 초기화라는 과정을 거치지 않으면 메모리 공간에 이전에 쓴 값이 남아있을 수 있는데 이를 쓰레기 값이라고 한다*

//1-4변수의 실행 시점?
//자바스크립트는 실행, 런타임 이전에 소스코드를 먼저 쭉 실행 하는데 그로 인해 변수 선언 이전에 변수 값을 참조하면 오류가 나지 않고 undefined가 호출
//ex)

console.log(score); //undefined
var score;
//이는 자바스크립트의 고유의 특징으로 변수 호이스팅이라고 함

//1-5값의 할당과 재할당
//ex)
var number = 10; //값(number)의 할당
console.log(number); //  10

var number = 20; //값(number)의 재할당
console.log(number); //   20

const num = 10; //const는 상수로 할당된 값을 수정하지 않음
// const num=20; = 고로 재 할당 불가능

//*가비지콜랙터: 할당된 값들이 주기적으로 검사를 해서 더이상 쓰이지 않는(어떤 식별자도 참조하지 않는 메모리 공간) 것들을 의미 *

//1-6식별자 네이밍 규칙
//식별자들이 쓰면 안되는 이름들이 있음
//ex await, break, case, catch, class, const, continue, debugger, default... etc

//*네이밍 컨벤션: 가독성 좋게 만든 식별자들*
//ex) 1.camelCase(firstName) 2.snake_case(first_name)

//2-1값이란?
//값은 식or표현식이 평가되어 생성된 결과

//2-2리터럴이란?
//사람이 이해할 수 있는 무자 또는 미리 약속한 기호로 표기한 코드
//ex) 정수(int), 문자(string), 참 거짓 (boolean), null, 객채(object),  배열(array)

//2-3표현식이란?
//값으로 평가(해석, 읽을)될 수 있는 문(statement)/표현식이 평가되면 새로운 값을 만들거나 기존의 값을 참조
//ex)
const score = 50 + 50;
//여기선 50+50이 표현식/값으로 평가 될수 있는 문은 전부 표현식

//2-4 문이란?
//문은 프로그램을 실행하는 최소의 실행 단위이고 여러 토큰으로 구성됨
//*토큰이란 문법적 의미를 가진 것중에 더이상 나눌 수 없는 최소의 기본요소들*
//ex
const sum = 1 + 2; //이 한문장이 문이자 명령문이고 const/sum/=/1/+/2 전부다 토큰으로 분류

//2-5 표현식이 아닌 문
//표현식인 문과 그렇지 않은 문을 구분하는 법은 변수에 할당
//ex
// var foo = var x; => var x는 표현식이 아니기에 값처럼 사용불가
